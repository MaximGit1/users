[tool.poetry]
name = "AuthService"
version = "0.1.0"
description = ""
authors = ["MaximGit1 <allq137x@gmail.com>"]
readme = "README.md"
packages = [{include = "auth_service", from = "src"}]

[tool.poetry.dependencies]
python = "^3.12"
ruff = "^0.8.3"
pytest = "^8.3.4"
fastapi = "^0.115.6"
sqlalchemy = {extras = ["asyncio"], version = "^2.0.36"}
bcrypt = "^4.2.1"
dishka = "^1.4.2"
uvicorn = "^0.34.0"
aiosqlite = "^0.20.0"
python-dotenv = "^1.0.1"
alembic = "^1.14.0"
httpx = "^0.28.1"


[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 79
fix = true

[tool.ruff.lint]
select = [
    "I",     # isort                  https://docs.astral.sh/ruff/rules/#isort-i
    "E",     # pycodestyle errors     https://docs.astral.sh/ruff/rules/#error-e
    "W",     # pycodestyle warnings   https://docs.astral.sh/ruff/rules/#warning-w
    "F",     # pyflakes               https://docs.astral.sh/ruff/rules/#pyflakes-f
    # "D",     # pydocstyle             https://docs.astral.sh/ruff/rules/#pydocstyle-d
    "B",     # flake8-bugbear         https://docs.astral.sh/ruff/rules/#flake8-bugbear-b
    "Q",     # flake8-quotes          https://docs.astral.sh/ruff/rules/#flake8-quotes-q
    "N",     # pep8-naming            https://docs.astral.sh/ruff/rules/#pep8-naming-n
    "UP",    # pyupgrade              https://docs.astral.sh/ruff/rules/#pyupgrade-up
    "C4",    # flake8-comprehensions  https://docs.astral.sh/ruff/rules/#flake8-comprehensions-c4
    "PT",    # flake8-pytest-style    https://docs.astral.sh/ruff/rules/#flake8-pytest-style-pt
    "PTH",   # flake8-use-pathlib     https://docs.astral.sh/ruff/rules/#flake8-use-pathlib-pth
    "TCH",   # flake8-type-checking   https://docs.astral.sh/ruff/rules/#flake8-type-checking-tch
    "C90",   # mccabe                 https://docs.astral.sh/ruff/rules/#mccabe-c90
    "T20",   # flake8-print           https://docs.astral.sh/ruff/rules/#flake8-print-t20
    "SIM",   # flake8-simplify        https://docs.astral.sh/ruff/rules/#flake8-simplify-sim
    "RUF",   # Ruff-specific rules    https://docs.astral.sh/ruff/rules/#ruff-specific-rules-ruf
    "PERF",  # Perflint               https://docs.astral.sh/ruff/rules/#perflint-perf
    "ASYNC", # flake8-async           https://docs.astral.sh/ruff/rules/#flake8-async-async
]
ignore = [
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
    "B904",  # raise exception with a string
]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true